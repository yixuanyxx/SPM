
name: CI

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install all service dependencies
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        shell: bash
        run: |
          echo "==> Installing dependencies for all microservices..."
          for svc in backend/*/ ; do
            [[ -d "$svc" ]] || continue
            if [[ -f "${svc}requirements.txt" ]]; then
              echo "Installing requirements for ${svc%/} ..."
              pip install -r "${svc}requirements.txt"
            fi
          done

      - name: Start microservices in background
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          CORS_ORIGINS: "http://localhost:5173"
          FLASK_DEBUG: "0"
        shell: bash
        run: |
          echo "==> Starting all microservices in background..."
          
          cd backend/projects
          python app.py > ../../projects.log 2>&1 &
          echo "Started Projects service (port 5001) - PID: $!"
          cd ../..
          
          cd backend/tasks
          python app.py > ../../tasks.log 2>&1 &
          echo "Started Tasks service (port 5002) - PID: $!"
          cd ../..
          
          cd backend/users
          python app.py > ../../users.log 2>&1 &
          echo "Started Users service (port 5003) - PID: $!"
          cd ../..
          
          cd backend/team
          python app.py > ../../team.log 2>&1 &
          echo "Started Team service (port 5004) - PID: $!"
          cd ../..
          
          cd backend/dept
          python app.py > ../../dept.log 2>&1 &
          echo "Started Dept service (port 5005) - PID: $!"
          cd ../..
          
          echo ""
          echo "==> Waiting for services to initialize..."
          sleep 10
          
          echo ""
          echo "==> Python processes running:"
          ps aux | grep "python app.py" | grep -v grep || echo "No app.py processes found"

      - name: Run tests for each microservice
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          CORS_ORIGINS: "http://localhost:5173"
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          echo "==> Running tests for each microservice..."
          echo "Note: Pipeline will FAIL and STOP if any tests fail"
          echo ""
          
          OVERALL_STATUS=0
          
          for svc in backend/*/ ; do
            [[ -d "$svc" ]] || continue

            echo ""
            echo "=============================="
            echo "Service: ${svc%/}"
            echo "=============================="

            if [[ -f "${svc}run_tests.py" ]]; then
              echo "Running tests for ${svc%/} ..."
              cd "${svc}"
              
              # Run tests and capture exit code
              if python run_tests.py; then
                echo "✓ Tests PASSED for ${svc%/}"
              else
                TEST_EXIT_CODE=$?
                echo "✗ Tests FAILED for ${svc%/} (exit code: $TEST_EXIT_CODE)"
                echo "Stopping CI pipeline due to test failure!"
                exit $TEST_EXIT_CODE
              fi
              
              cd - > /dev/null
            else
              echo "No run_tests.py in ${svc%/} — nothing to run."
            fi
          done
          
          echo ""
          echo "=============================="
          echo "✓ All microservice tests PASSED"
          echo "=============================="

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "==> Service logs:"
          for log in *.log; do
            if [[ -f "$log" ]]; then
              echo ""
              echo "====== ${log} ======"
              tail -100 "$log"
            fi
          done