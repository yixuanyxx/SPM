name: CI

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Discover and test each microservice
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          CORS_ORIGINS: "http://localhost:5173"
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          echo "==> Installing dependencies and starting microservices..."
          for svc in backend/*/ ; do
            [[ -f "${svc}app.py" ]] || continue
            echo "Preparing ${svc} ..."
            
            # Install requirements first
            if [[ -f "${svc}requirements.txt" ]]; then
              pip install -q -r "${svc}requirements.txt"
            fi
            
            # Start service in background (disable Flask debug mode reloader)
            cd "${svc}"
            WERKZEUG_RUN_MAIN=true python app.py > service.log 2>&1 &
            SERVICE_PID=$!
            echo "  Started ${svc} (PID: $SERVICE_PID)"
            cd - > /dev/null
            
            # Give this service a moment to bind to its port
            sleep 2
          done

          echo "Waiting for all microservices to be ready..."
          sleep 10
          
          # Verify services are running
          echo "Checking service health..."
          curl -s http://localhost:5003/health || echo "  Users service may not be ready"
          curl -s http://localhost:5002/health || echo "  Tasks service may not be ready"
          curl -s http://localhost:5001/health || echo "  Projects service may not be ready"
          curl -s http://localhost:5004/health || echo "  Team service may not be ready"
          curl -s http://localhost:5005/health || echo "  Dept service may not be ready"

          echo "==> Scanning backend microservices..."
          for svc in backend/*/ ; do
            [[ -d "$svc" ]] || continue

            echo ""
            echo "=============================="
            echo "Service: ${svc%/}"
            echo "=============================="

            # 1) Create and activate virtual environment
            echo "Creating virtual environment for ${svc%/} ..."
            python -m venv "${svc}venv_ci"
            source "${svc}venv_ci/bin/activate"

            # 2) Install per-service requirements if present
            if [[ -f "${svc}requirements.txt" ]]; then
              echo "Installing requirements for ${svc%/} ..."
              pip install -r "${svc}requirements.txt"
            else
              echo "No requirements.txt in ${svc%/} — skipping install."
            fi

            # 3) Run tests if run_tests.py exists
            if [[ -f "${svc}run_tests.py" ]]; then
              echo "Running tests for ${svc%/} ..."
              cd "${svc}"
              python run_tests.py
              cd - > /dev/null
            else
              echo "No run_tests.py in ${svc%/} — nothing to run."
            fi

            # 4) Deactivate and cleanup virtual environment
            deactivate
            rm -rf "${svc}venv_ci"
            echo "Cleaned up virtual environment for ${svc%/}"
          done
