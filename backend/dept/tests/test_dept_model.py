import unittest
from datetime import datetime, UTC
from models.dept import Department


class TestDepartmentModel(unittest.TestCase):
    """Unit tests for the Department model class."""

    def test_department_creation_with_defaults(self):
        """Test creating a department with default values."""
        dept = Department()
        
        assert dept.id is None
        assert dept.name == ""
        assert dept.created_at is None  # Auto-generated by database

    def test_department_creation_with_values(self):
        """Test creating a department with specific values."""
        dept = Department(name="Engineering")
        
        assert dept.name == "Engineering"
        assert dept.created_at is None  # Auto-generated by database
        assert dept.id is None

    def test_department_creation_with_name_only(self):
        """Test creating a department with only name specified."""
        dept = Department(name="Marketing")
        
        assert dept.name == "Marketing"
        assert dept.id is None
        assert dept.created_at is None  # Auto-generated by database

    def test_department_id_assignment(self):
        """Test that department ID can be assigned after creation."""
        dept = Department(name="Sales")
        dept.id = 123
        
        assert dept.id == 123
        assert dept.name == "Sales"

    def test_department_created_at_format(self):
        """Test that created_at is None by default (auto-generated by database)."""
        dept = Department(name="HR")
        
        # Should be None since it's auto-generated by database
        assert dept.created_at is None

    def test_department_custom_created_at(self):
        """Test department with created_at field (should be None by default)."""
        dept = Department(name="Finance")
        
        assert dept.created_at is None  # Auto-generated by database
        assert dept.name == "Finance"

    def test_department_empty_name(self):
        """Test department with empty name."""
        dept = Department(name="")
        
        assert dept.name == ""
        assert dept.id is None
        assert dept.created_at is None  # Auto-generated by database

    def test_department_whitespace_name(self):
        """Test department with whitespace-only name."""
        dept = Department(name="   ")
        
        assert dept.name == "   "
        assert dept.id is None
        assert dept.created_at is None  # Auto-generated by database

    def test_department_long_name(self):
        """Test department with very long name."""
        long_name = "A" * 1000
        dept = Department(name=long_name)
        
        assert dept.name == long_name
        assert len(dept.name) == 1000
        assert dept.created_at is None  # Auto-generated by database

    def test_department_special_characters_name(self):
        """Test department with special characters in name."""
        special_name = "R&D & Marketing (2024) - Special Projects"
        dept = Department(name=special_name)
        
        assert dept.name == special_name
        assert dept.created_at is None  # Auto-generated by database

    def test_department_unicode_name(self):
        """Test department with unicode characters in name."""
        unicode_name = "DÃ©partement de Recherche & DÃ©veloppement"
        dept = Department(name=unicode_name)
        
        assert dept.name == unicode_name
        assert dept.created_at is None  # Auto-generated by database

    def test_department_multiple_instances(self):
        """Test creating multiple department instances."""
        dept1 = Department(name="Engineering")
        dept2 = Department(name="Marketing")
        
        assert dept1.name == "Engineering"
        assert dept2.name == "Marketing"
        assert dept1 is not dept2
        # Both should have None for created_at (auto-generated by database)
        assert dept1.created_at is None
        assert dept2.created_at is None

    def test_department_immutable_fields(self):
        """Test that department fields can be modified after creation."""
        dept = Department(name="Original")
        
        # Should be able to modify fields
        dept.name = "Modified"
        dept.id = 456
        dept.created_at = "2024-12-31T23:59:59+00:00"
        
        assert dept.name == "Modified"
        assert dept.id == 456
        assert dept.created_at == "2024-12-31T23:59:59+00:00"

    def test_department_string_representation(self):
        """Test string representation of department."""
        dept = Department(name="Test Department")
        dept.id = 789
        
        # Check that we can convert to string (dataclass should handle this)
        str_repr = str(dept)
        assert "Test Department" in str_repr
        # Note: id is not in repr due to repr=False in model

    def test_department_equality(self):
        """Test department equality comparison."""
        dept1 = Department(name="Same Department")
        dept2 = Department(name="Same Department")
        dept3 = Department(name="Different Department")
        
        # Same name, different instances
        assert dept1.name == dept2.name
        assert dept1.name != dept3.name
        
        # Both should have None for created_at (auto-generated by database)
        assert dept1.created_at is None
        assert dept2.created_at is None

    def test_department_with_none_values(self):
        """Test department behavior with None values."""
        dept = Department(name="Test")
        dept.id = None
        
        assert dept.name == "Test"
        assert dept.id is None
        assert dept.created_at is None  # Auto-generated by database

    def test_department_field_types(self):
        """Test that department fields have correct types."""
        dept = Department(name="Type Test")
        
        assert isinstance(dept.name, str)
        assert dept.created_at is None  # Auto-generated by database
        assert dept.id is None or isinstance(dept.id, int)

    def test_department_created_at_timezone(self):
        """Test that created_at is None by default (auto-generated by database)."""
        dept = Department(name="Timezone Test")
        
        # Should be None since it's auto-generated by database
        assert dept.created_at is None

    def test_department_minimal_creation(self):
        """Test creating department with minimal required fields."""
        dept = Department()
        
        # Should have defaults
        assert dept.id is None
        assert dept.name == ""
        assert dept.created_at is None  # Auto-generated by database

    def test_department_all_fields_set(self):
        """Test department with all fields explicitly set."""
        dept = Department(name="Complete Department")
        dept.id = 999
        dept.created_at = "2024-06-15T14:30:00+00:00"
        
        assert dept.id == 999
        assert dept.name == "Complete Department"
        assert dept.created_at == "2024-06-15T14:30:00+00:00"
